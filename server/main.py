from fastmcp import FastMCP
from dotenv import load_dotenv
import os
import asyncio
from server.api import call_endpoint
from typing import List, Dict, Optional, Annotated
from pydantic import Field
load_dotenv()
print(f"Method API Key in server: {os.getenv('METHOD_API_KEY')}")

mcp = FastMCP()

@mcp.tool(name="HelloWorld", description="A simple hello world tool")
def hello_world():
    return f"Hello, World! my API key is {os.getenv("METHOD_API_KEY")}"

@mcp.tool(name="create_individual", description="Create an individual in Method")
async def create_individual(
    first_name: Annotated[str, Field(description="The input prompt sent to the LLM")],
    last_name: Annotated[str, Field(description="The response generated by the LLM")],
    phone: Annotated[str, Field(description="Name of the LLM")],
    email: Annotated[str, Field(description="Identifier for the LLM provider")],
    dob: Annotated[str, Field(description="User-dob in yyyy-mm-dd format")],
    street_address: Annotated[str, Field(description="Temperature setting used")],
    street_address_2: Annotated[Optional[str], Field(description="Optional additional context")] = None,
    city: Annotated[str, Field(description="Optional conversation history")] = None,
    state: Annotated[str, Field(description="Optional conversation history")] = None,
    zip: Annotated[str, Field(description="Optional conversation history")] = None,
) -> Dict:
    """
      "type": "individual",
    "individual": {
        "first_name": "{first_name}",
        "last_name": "{last_name}",
        "phone": "{phone}",
        "email": "{email}",
        "dob": "yyyy-mm-dd"
    },
    "address": {
        "line1": "street address",
        "line2": "null or street address 2",
        "city": "{city}",
        "state": "{state: XX}",
        "zip": "{zip}"
    }
    }'
    """
    entity_data = {
        "type": "individual",
        "individual": {
            "first_name": first_name,
            "last_name": last_name,
            "phone": phone,
            "email": email,
            "dob": dob
        },
        "address": {
            "line1": street_address,
            "line2": street_address_2,
            "city": city,
            "state": "TX",
            "zip": "78705"
        }
    }
    print(f"Entity data being sent: {entity_data}")
    return call_endpoint("/entities", "POST", data=entity_data)


def main():
    mcp.run(transport="streamable-http", port=8002)


if __name__ == "__main__":
    main()
